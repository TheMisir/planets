{"version":3,"sources":["../src/vector.ts","../src/game.ts","../src/scene.ts","../src/meter.ts","../src/planet.ts","../src/movement.ts","../main.ts"],"names":[],"mappings":"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","file":"main.9f7494dd.js","sourceRoot":"../public","sourcesContent":["export class Vector2 {\n  x: number;\n  y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  static get zero() {\n    return new Vector2(0, 0);\n  }\n\n  static random(dx: number, dy: number) {\n    return new Vector2(dx * Math.random(), dy * Math.random());\n  }\n\n  copyFrom(v: Vector2) {\n    this.x = v.x;\n    this.y = v.y;\n  }\n\n  set(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  clone() {\n    return new Vector2(this.x, this.y);\n  }\n\n  distance(other: Vector2) {\n    return this.subtract(other).magnitude();\n  }\n\n  addSelf(other: Vector2) {\n    this.x += other.x;\n    this.y += other.y;\n  }\n\n  add(other: Vector2) {\n    return new Vector2(this.x + other.x, this.y + other.y);\n  }\n\n  subtract(other: Vector2) {\n    return new Vector2(this.x - other.x, this.y - other.y);\n  }\n\n  magnitude() {\n    return Math.sqrt(this.x ** 2 + this.y ** 2);\n  }\n\n  multiply(other: number) {\n    return new Vector2(this.x * other, this.y * other);\n  }\n\n  negative() {\n    return this.multiply(-1);\n  }\n\n  normalize() {\n    const mag = this.magnitude();\n    return new Vector2(this.x / mag, this.y / mag);\n  }\n\n  static angle(rad: number) {\n    return new Vector2(Math.cos(rad), Math.sin(rad));\n  }\n\n  perpendicularClockwise() {\n    return new Vector2(this.y, -this.x);\n  }\n\n  perpendicularCounterClockwise() {\n    return new Vector2(-this.y, this.x);\n  }\n}\n","import { Vector2 } from \"./vector\";\nimport { Scene } from \"./scene\";\n\nexport class Camera {\n  private scene: Scene;\n  private m_zoom: number;\n\n  public get zoom() {\n    return this.m_zoom;\n  }\n\n  public set zoom(value: number) {\n    this.m_zoom = Math.max(0.0005, Math.min(100, value));\n  }\n\n  public position = new Vector2(0, 0);\n\n  constructor(zoom: number = 1) {\n    this.m_zoom = zoom;\n  }\n\n  setScene(scene: Scene) {\n    this.scene = scene;\n  }\n\n  worldToScreen(point: Vector2) {\n    return point.add(this.position).multiply(this.zoom).add(this.scene.center);\n  }\n\n  inScreen(point: Vector2) {\n    return (\n      point.x >= 0 &&\n      point.x <= this.scene.width &&\n      point.y >= 0 &&\n      point.y <= this.scene.height\n    );\n  }\n\n  screenToWorld(point: Vector2) {\n    return point\n      .subtract(this.scene.center)\n      .multiply(1 / this.zoom)\n      .subtract(this.position);\n  }\n}\n\nexport class Game {\n  private lastTick: number;\n  private objects: GameObject[] = [];\n\n  public fixedDeltaTime: number;\n  public deltaTime: number;\n\n  public scene: Scene;\n  public camera: Camera;\n\n  constructor(scene: Scene, camera: Camera, fixedTicks: number = 60) {\n    this.scene = scene;\n    this.camera = camera;\n    this.fixedDeltaTime = 1 / fixedTicks;\n\n    camera.setScene(scene);\n  }\n\n  get children(): Array<GameObject> {\n    return this.objects;\n  }\n\n  add(object: GameObject) {\n    this.objects.push(object);\n    object.setGame(this);\n  }\n\n  remove(object: GameObject) {\n    if (object.dispose) {\n      object.dispose();\n    }\n\n    this.objects = this.objects.filter((obj) => obj !== object);\n  }\n\n  forEach(cb: (object: GameObject) => void, onlyActive = true) {\n    let i = 0;\n\n    while (i < this.objects.length) {\n      const object = this.objects[i];\n      if (!onlyActive || object.active) {\n        cb(object);\n      }\n      i++;\n    }\n  }\n\n  start() {\n    this.lastTick = Date.now();\n    this.fixedUpdateAll = this.fixedUpdateAll.bind(this);\n    this.render = this.render.bind(this);\n\n    setInterval(this.fixedUpdateAll, this.fixedDeltaTime);\n\n    this.forEach((obj) => {\n      if (obj.enabled) {\n        obj.start?.apply(obj);\n      }\n    });\n\n    this.render();\n  }\n\n  render() {\n    const now = Date.now();\n    const delta = now - this.lastTick;\n\n    this.lastTick = now;\n    this.deltaTime = delta / 1000;\n\n    this.scene.clear();\n\n    this.forEach((obj) => {\n      if (obj.enabled && obj.update) {\n        obj.update();\n      }\n\n      if (!obj.inScene || obj.inScene(this.camera)) {\n        if (obj.render) {\n          obj.render(this.scene.ctx);\n        }\n      }\n    });\n\n    requestAnimationFrame(this.render);\n  }\n\n  fixedUpdateAll() {\n    this.objects.forEach((obj) => {\n      if (obj.active && obj.fixedUpdate) {\n        obj.fixedUpdate();\n      }\n    });\n  }\n}\n\nexport class GameObject {\n  public active: boolean = true;\n  public enabled: boolean = true;\n  public game: Game;\n\n  get deltaTime() {\n    return this.game.deltaTime;\n  }\n\n  get fixedDeltaTime() {\n    return this.game.fixedDeltaTime;\n  }\n\n  get camera() {\n    return this.game.camera;\n  }\n\n  get ctx() {\n    return this.game.scene.ctx;\n  }\n\n  get scene() {\n    return this.game.scene;\n  }\n\n  setGame(game: Game) {\n    this.game = game;\n  }\n\n  start?(): void;\n\n  fixedUpdate?(): void;\n\n  update?(): void;\n\n  render?(ctx: CanvasRenderingContext2D): void;\n\n  inScene?(camera: Camera): boolean;\n\n  dispose?(): void;\n\n  remove() {\n    this.game.remove(this);\n  }\n}\n","import { Vector2 } from \"./vector\";\n\nexport class Scene {\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n  width: number;\n  height: number;\n  center: Vector2;\n\n  constructor(canvas: Element | string) {\n    if (typeof canvas === \"string\") {\n      canvas = document.querySelector(canvas);\n    }\n\n    this.canvas = canvas as HTMLCanvasElement;\n    this.ctx = this.canvas.getContext(\"2d\");\n\n    this.resized = this.resized.bind(this);\n    this.resized();\n\n    window.addEventListener(\"resize\", this.resized);\n  }\n\n  resized() {\n    this.canvas.width = this.width = window.innerWidth;\n    this.canvas.height = this.height = window.innerHeight;\n    this.center = new Vector2(this.width / 2, this.height / 2);\n  }\n\n  clear() {\n    this.ctx.clearRect(0, 0, this.width, this.height);\n  }\n}\n","import { GameObject } from \"./game\";\n\nexport class FPSMeter extends GameObject {\n  render(ctx: CanvasRenderingContext2D) {\n    ctx.textAlign = \"start\";\n    ctx.fillStyle = \"#fff\";\n    ctx.font = \"20px Arial\";\n    ctx.fillText(`${Math.round(1 / this.deltaTime)} FPS`, 100, 100);\n  }\n}\n","import { GameObject, Camera } from \"./game\";\nimport { Vector2 } from \"./vector\";\n\nconst G = 100;\n\nexport class Planet extends GameObject {\n  radius: number;\n  mass: number;\n  position: Vector2;\n  velocity: Vector2;\n\n  get impulse(): Vector2 {\n    return this.velocity.multiply(this.mass);\n  }\n\n  get volume(): number {\n    return 0.75 * Math.PI * this.radius ** 3;\n  }\n\n  set volume(value: number) {\n    this.radius = Math.pow(value / (0.75 * Math.PI), 1 / 3);\n  }\n\n  constructor(\n    position: Vector2,\n    radius: number,\n    mass: number,\n    velocity?: Vector2\n  ) {\n    super();\n    this.position = position;\n    this.radius = radius;\n    this.mass = mass;\n    this.velocity = velocity || new Vector2(0, 0);\n  }\n\n  private attract(other: Planet) {\n    const r = this.position.distance(other.position);\n\n    /// F = G * (m1 * m2) / r^2\n\n    const F = (G * this.mass * other.mass) / r ** 2;\n\n    /// a = F / m\n    /// v = a * t\n\n    const a = F / this.mass;\n    const v = a * this.fixedDeltaTime;\n\n    const direction = other.position.subtract(this.position);\n\n    this.velocity = this.velocity.add(direction.normalize().multiply(v));\n  }\n\n  inside(point: Vector2) {\n    return point.distance(this.position) < this.radius;\n  }\n\n  fixedUpdate() {\n    const planets = this.game.children\n      .filter((obj) => obj !== this && \"attract\" in obj)\n      .map((obj) => obj as Planet);\n\n    for (let planet of planets) {\n      this.applyCollision(planet);\n      this.attract(planet);\n    }\n  }\n\n  applyCollision(planet: Planet) {\n    const direction = planet.position.subtract(this.position);\n    const dist = direction.magnitude() - (planet.radius + this.radius);\n\n    if (dist < -Number.EPSILON) {\n      if (planet.mass < this.mass) {\n        this.volume += planet.volume;\n        this.mass += planet.mass;\n        \n        planet.remove();\n      }\n    }\n  }\n\n  update() {\n    this.position = this.position.add(this.velocity.multiply(this.deltaTime));\n  }\n\n  render(ctx: CanvasRenderingContext2D) {\n    const center = this.camera.worldToScreen(this.position);\n\n    ctx.fillStyle = \"#fff\";\n    ctx.beginPath();\n    ctx.arc(center.x, center.y, this.radius * this.camera.zoom, 0, Math.PI * 2);\n    ctx.fill();\n\n    const fontSize = 0.4 * this.radius * this.camera.zoom;\n    if (fontSize > 7) {\n      const text = `${Math.round(this.velocity.magnitude() * 10) / 10}`;\n      ctx.textAlign = \"center\";\n      ctx.textBaseline = \"middle\";\n      ctx.fillStyle = \"#000\";\n      ctx.font = `${fontSize}px Arial`;\n      ctx.fillText(text, center.x, center.y);\n    }\n\n    const vp = this.camera.worldToScreen(this.position.add(this.velocity));\n    ctx.strokeStyle = \"#f00\";\n    ctx.lineWidth = Math.min(5, this.camera.zoom * 100);\n    ctx.beginPath();\n    ctx.moveTo(center.x, center.y);\n    ctx.lineTo(vp.x, vp.y);\n    ctx.stroke();\n  }\n\n  inScene(camera: Camera) {\n    return camera.inScreen(camera.worldToScreen(this.position));\n  }\n}\n","import { GameObject } from \"./game\";\nimport { Vector2 } from \"./vector\";\n\ntype KeyStateArray = { [key: number]: boolean };\ntype MouseState = {\n  buttons: KeyStateArray;\n  position: Vector2;\n  downPosition?: Vector2;\n  prevPosition: Vector2;\n  wheelDelta: number;\n};\n\nexport class Movement extends GameObject {\n  readonly movementSpeed: number;\n  readonly zoomFactor: number;\n  readonly keys: KeyStateArray;\n  readonly mouse: MouseState;\n\n  constructor(movementSpeed: number, zoomFactor: number) {\n    super();\n    this.movementSpeed = movementSpeed;\n    this.zoomFactor = zoomFactor;\n    this.keys = new Array(221).fill(false);\n    this.mouse = {\n      buttons: [false, false],\n      position: new Vector2(0, 0),\n      prevPosition: new Vector2(0, 0),\n      wheelDelta: 0,\n    };\n\n    this.onKeyDown = this.onKeyDown.bind(this);\n    this.onKeyUp = this.onKeyUp.bind(this);\n    this.onPointerDown = this.onPointerDown.bind(this);\n    this.onPointerMove = this.onPointerMove.bind(this);\n    this.onPointerUp = this.onPointerUp.bind(this);\n    this.onWheel = this.onWheel.bind(this);\n  }\n\n  start() {\n    window.addEventListener(\"keydown\", this.onKeyDown);\n    window.addEventListener(\"keyup\", this.onKeyUp);\n    window.addEventListener(\"pointerdown\", this.onPointerDown);\n    window.addEventListener(\"pointermove\", this.onPointerMove);\n    window.addEventListener(\"pointerup\", this.onPointerUp);\n    window.addEventListener(\"wheel\", this.onWheel);\n  }\n\n  onWheel(event: WheelEvent) {\n    // @ts-ignore\n    this.mouse.wheelDelta = event.wheelDelta;\n  }\n\n  onPointerDown(event: PointerEvent) {\n    this.mouse.buttons[event.button] = true;\n    this.onPointerMove(event);\n\n    if (event.button == 0) {\n      this.mouse.downPosition = new Vector2(event.pageX, event.pageY);\n    }\n  }\n\n  onPointerMove(event: PointerEvent) {\n    this.mouse.prevPosition.copyFrom(this.mouse.position);\n    this.mouse.position.set(event.pageX, event.pageY);\n  }\n\n  onPointerUp(event: PointerEvent) {\n    this.mouse.buttons[event.button] = false;\n    this.onPointerMove(event);\n\n    if (event.button == 0) {\n      this.mouse.downPosition = undefined;\n    }\n  }\n\n  onKeyDown(event: KeyboardEvent) {\n    this.keys[event.keyCode] = true;\n  }\n\n  onKeyUp(event: KeyboardEvent) {\n    this.keys[event.keyCode] = false;\n  }\n\n  update() {\n    const shiftKey = this.keys[16];\n    const altKey = this.keys[18];\n    const multipler = (shiftKey ? 5 : 1) / (altKey ? 5 : 1);\n\n    const zoomSpeed = this.zoomFactor * multipler * this.deltaTime;\n    const movementSpeed =\n      (this.movementSpeed * multipler * this.deltaTime) / this.camera.zoom;\n\n    /// - or [ or NUM -\n    if (\n      this.keys[189] ||\n      this.keys[219] ||\n      this.keys[109] ||\n      this.mouse.wheelDelta < 0\n    ) {\n      this.camera.zoom -= zoomSpeed;\n    }\n\n    /// = or ] or NUM +\n    if (\n      this.keys[187] ||\n      this.keys[221] ||\n      this.keys[107] ||\n      this.mouse.wheelDelta > 0\n    ) {\n      this.camera.zoom += zoomSpeed;\n    }\n\n    /// W or UpArrow\n    if (this.keys[87] || this.keys[38]) {\n      this.camera.position.y += movementSpeed;\n    }\n\n    /// A or LeftArrow\n    if (this.keys[65] || this.keys[37]) {\n      this.camera.position.x += movementSpeed;\n    }\n\n    /// S or DownArrow\n    if (this.keys[83] || this.keys[40]) {\n      this.camera.position.y -= movementSpeed;\n    }\n\n    /// D or RightArrow\n    if (this.keys[68] || this.keys[39]) {\n      this.camera.position.x -= movementSpeed;\n    }\n\n    // Dragging\n    if (this.mouse.buttons[0]) {\n      this.camera.position.addSelf(\n        this.mouse.position\n          .subtract(this.mouse.prevPosition)\n          .multiply(movementSpeed)\n      );\n    }\n\n    // Reset value\n    this.mouse.wheelDelta = 0;\n    this.mouse.prevPosition.copyFrom(this.mouse.position);\n  }\n}\n","import { Vector2 } from \"./src/vector\";\nimport { Game, Camera } from \"./src/game\";\nimport { Scene } from \"./src/scene\";\nimport { FPSMeter } from \"./src/meter\";\nimport { Planet } from \"./src/planet\";\nimport { Movement } from \"./src/movement\";\n\nconst randomBetween = (min: number, max: number) =>\n  min + (max - min) * Math.random();\n\nconst scene = new Scene(\"#canvas\");\nconst camera = new Camera(0.003);\nconst game = new Game(scene, camera);\n\nconst galaxySize = 500000;\nconst planetCount = 300;\nconst bigPlanetCount = randomBetween(3, 7);\nconst planetRadius = () => randomBetween(50, 500);\nconst planetMass = (radius: number) => radius * 100000;\nconst bigPlanetRadius = () => randomBetween(10000, 20000);\n\nfor (let i = 0; i < bigPlanetCount; i++) {\n  const radius = bigPlanetRadius();\n\n  game.add(\n    new Planet(\n      new Vector2(\n        randomBetween(-galaxySize, galaxySize),\n        randomBetween(-galaxySize, galaxySize)\n      ),\n      radius,\n      planetMass(radius)\n    )\n  );\n}\n\nfor (let i = 0; i < planetCount; i++) {\n  const radius = planetRadius();\n\n  game.add(\n    new Planet(\n      new Vector2(\n        randomBetween(-galaxySize, galaxySize),\n        randomBetween(-galaxySize, galaxySize)\n      ),\n      radius,\n      planetMass(radius)\n    )\n  );\n}\n\ngame.add(new FPSMeter());\ngame.add(new Movement(50, 0.01));\ngame.start();\n"]}