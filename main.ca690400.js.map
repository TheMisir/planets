{"version":3,"sources":["src/vector.ts","src/game.ts","src/scene.ts","main.ts"],"names":[],"mappings":"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","file":"main.ca690400.js","sourceRoot":"..","sourcesContent":["export class Vector2 {\n  x: number;\n  y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  static get zero() {\n    return new Vector2(0, 0);\n  }\n\n  static random(dx: number, dy: number) {\n    return new Vector2(dx * Math.random(), dy * Math.random());\n  }\n\n  clone() {\n    return new Vector2(this.x, this.y);\n  }\n\n  distance(other: Vector2) {\n    return this.subtract(other).magnitude();\n  }\n\n  add(other: Vector2) {\n    return new Vector2(this.x + other.x, this.y + other.y);\n  }\n\n  subtract(other: Vector2) {\n    return new Vector2(this.x - other.x, this.y - other.y);\n  }\n\n  magnitude() {\n    return Math.sqrt(this.x ** 2 + this.y ** 2);\n  }\n\n  multiply(other: number) {\n    return new Vector2(this.x * other, this.y * other);\n  }\n\n  negative() {\n    return this.multiply(-1);\n  }\n\n  normalize() {\n    const mag = this.magnitude();\n    return new Vector2(this.x / mag, this.y / mag);\n  }\n\n  static angle(rad: number) {\n    return new Vector2(Math.cos(rad), Math.sin(rad));\n  }\n\n  perpendicularClockwise() {\n    return new Vector2(this.y, -this.x);\n  }\n\n  perpendicularCounterClockwise() {\n    return new Vector2(-this.y, this.x);\n  }\n}\n","import { Vector2 } from \"./vector\";\nimport { Scene } from \"./scene\";\n\nexport class Camera {\n  private scene: Scene;\n  public zoom: number;\n  public position = new Vector2(0, 0);\n\n  constructor(zoom: number = 1) {\n    this.zoom = zoom;\n  }\n\n  setScene(scene: Scene) {\n    this.scene = scene;\n  }\n\n  worldToScreen(point: Vector2) {\n    return point.add(this.position).multiply(this.zoom).add(this.scene.center);\n  }\n\n  screenToWorld(point: Vector2) {\n    return point\n      .subtract(this.scene.center)\n      .multiply(1 / this.zoom)\n      .subtract(this.position);\n  }\n}\n\nexport class Game {\n  private lastTick: number;\n  private objects: GameObject[] = [];\n\n  public fixedDeltaTime: number;\n  public deltaTime: number;\n\n  public scene: Scene;\n  public camera: Camera;\n\n  constructor(scene: Scene, camera: Camera, fixedTicks: number = 60) {\n    this.scene = scene;\n    this.camera = camera;\n    this.fixedDeltaTime = 1 / fixedTicks;\n\n    camera.setScene(scene);\n  }\n\n  get children(): Array<GameObject> {\n    return this.objects;\n  }\n\n  add(object: GameObject) {\n    this.objects.push(object);\n    object.setGame(this);\n  }\n\n  remove(object: GameObject) {\n    this.objects = this.objects.filter((obj) => obj !== object);\n  }\n\n  start() {\n    this.lastTick = Date.now();\n    this.fixedUpdateAll = this.fixedUpdateAll.bind(this);\n    this.render = this.render.bind(this);\n\n    setInterval(this.fixedUpdateAll, this.fixedDeltaTime);\n\n    this.objects.forEach((obj) => {\n      if (obj.active && obj.start) {\n        obj.start();\n      }\n    });\n\n    this.render();\n  }\n\n  render() {\n    const now = Date.now();\n    const delta = now - this.lastTick;\n\n    this.lastTick = now;\n    this.deltaTime = delta / 1000;\n\n    this.scene.clear();\n\n    this.objects.forEach((obj) => {\n      if (obj.active) {\n        if (obj.update) {\n          obj.update();\n        }\n\n        if (obj.render) {\n          obj.render(this.scene.ctx);\n        }\n      }\n    });\n\n    requestAnimationFrame(this.render);\n  }\n\n  fixedUpdateAll() {\n    this.objects.forEach((obj) => {\n      if (obj.active && obj.fixedUpdate) {\n        obj.fixedUpdate();\n      }\n    });\n  }\n}\n\nexport class GameObject {\n  public active: boolean = true;\n  public game: Game;\n\n  get deltaTime() {\n    return this.game.deltaTime;\n  }\n\n  get fixedDeltaTime() {\n    return this.game.fixedDeltaTime;\n  }\n\n  get camera() {\n    return this.game.camera;\n  }\n\n  get ctx() {\n    return this.game.scene.ctx;\n  }\n\n  get scene() {\n    return this.game.scene;\n  }\n\n  setGame(game: Game) {\n    this.game = game;\n  }\n\n  start?(): void;\n\n  fixedUpdate?(): void;\n\n  update?(): void;\n\n  render?(ctx: CanvasRenderingContext2D): void;\n}\n","import { Vector2 } from \"./vector\";\n\nexport class Scene {\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n  width: number;\n  height: number;\n  center: Vector2;\n\n  constructor(canvas: Element | string) {\n    if (typeof canvas === \"string\") {\n      canvas = document.querySelector(canvas);\n    }\n\n    this.canvas = canvas as HTMLCanvasElement;\n    this.ctx = this.canvas.getContext(\"2d\");\n\n    this.resized = this.resized.bind(this);\n    this.resized();\n\n    window.addEventListener(\"resize\", this.resized);\n  }\n\n  resized() {\n    this.canvas.width = this.width = window.innerWidth;\n    this.canvas.height = this.height = window.innerHeight;\n    this.center = new Vector2(this.width / 2, this.height / 2);\n  }\n\n  clear() {\n    this.ctx.clearRect(0, 0, this.width, this.height);\n  }\n}\n","import { Vector2 } from \"./src/vector\";\nimport { Game, Camera, GameObject } from \"./src/game\";\nimport { Scene } from \"./src/scene\";\n\nconst G = 50;\n\nclass Planet extends GameObject {\n  radius: number;\n  mass: number;\n  position: Vector2;\n  velocity: Vector2;\n\n  constructor(\n    position: Vector2,\n    radius: number,\n    mass: number,\n    velocity?: Vector2\n  ) {\n    super();\n    this.position = position;\n    this.radius = radius;\n    this.mass = mass;\n    this.velocity = velocity || new Vector2(0, 0);\n  }\n\n  private attract(other: Planet) {\n    const r = this.position.distance(other.position);\n    const F = (G * this.mass * other.mass) / r ** 2;\n\n    /// F = m * a\n    /// a = F / m\n\n    const a = F / this.mass;\n\n    /// a = v / t\n    /// v = a * t\n\n    /// Limit velocity to 100 units\n    const v = a * this.fixedDeltaTime;\n\n    const direction = other.position.subtract(this.position);\n\n    this.velocity = this.velocity.add(direction.normalize().multiply(v));\n  }\n\n  inside(point: Vector2) {\n    return point.distance(this.position) < this.radius;\n  }\n\n  fixedUpdate() {\n    const planets = this.game.children\n      .filter((obj) => obj !== this && \"attract\" in obj)\n      .map((obj) => obj as Planet);\n\n    for (let planet of planets) {\n      planet.attract(this);\n    }\n  }\n\n  applyCollision() {\n    const planets = this.game.children\n      .filter((obj) => obj !== this && \"attract\" in obj)\n      .map((obj) => obj as Planet);\n\n    for (let planet of planets) {\n      const direction = planet.position.subtract(this.position);\n      const dist = direction.magnitude() - (planet.radius + this.radius);\n\n      if (dist < 0) {\n        const v = direction.normalize().multiply(-dist);\n        planet.position = planet.position.add(v);\n      }\n    }\n  }\n\n  update() {\n    this.position = this.position.add(this.velocity.multiply(this.deltaTime));\n    this.applyCollision();\n  }\n\n  render(ctx: CanvasRenderingContext2D) {\n    const center = this.camera.worldToScreen(this.position);\n\n    ctx.strokeStyle = \"#fff\";\n    ctx.beginPath();\n    ctx.arc(center.x, center.y, this.radius * this.camera.zoom, 0, Math.PI * 2);\n    ctx.stroke();\n\n    ctx.textAlign = \"center\";\n    ctx.fillStyle = \"#fff\";\n    ctx.font = `${15 * this.camera.zoom}px Arial`;\n    ctx.fillText(\n      `${Math.round(this.velocity.magnitude() * 100) / 100}`,\n      center.x,\n      center.y\n    );\n\n    const vp = this.camera.worldToScreen(this.position.add(this.velocity));\n    ctx.strokeStyle = \"rgba(255,0,0,.5)\";\n    ctx.beginPath();\n    ctx.moveTo(center.x, center.y);\n    ctx.lineTo(vp.x, vp.y);\n    ctx.stroke();\n  }\n}\n\nfunction randomBetween(min: number, max: number) {\n  return min + (max - min) * Math.random();\n}\n\nconst scene = new Scene(\"#canvas\");\nconst camera = new Camera(0.05);\nconst game = new Game(scene, camera);\n\nconst border = 10000;\n\nfor (let i = 0; i < 50; i++) {\n  const radius = randomBetween(20, 60);\n  const position = new Vector2(\n    randomBetween(-border, border),\n    randomBetween(-border, border)\n  );\n\n  game.add(new Planet(position, radius, 1000000 * radius));\n}\n\nfor (let i = 0; i < 10; i++) {\n  const radius = randomBetween(200, 500);\n  const position = new Vector2(\n    randomBetween(-border, border),\n    randomBetween(-border, border)\n  );\n\n  game.add(new Planet(position, radius, 1000000 * radius));\n}\n\ngame.start();\n\ndocument.onkeypress = (event) => {\n  switch (event.key) {\n    case \"q\":\n      camera.zoom /= 1.2;\n      break;\n    case \"e\":\n      camera.zoom *= 1.2;\n      break;\n    case \"w\":\n      camera.position.y += 5 / camera.zoom;\n      break;\n    case \"a\":\n      camera.position.x -= 5 / camera.zoom;\n      break;\n    case \"s\":\n      camera.position.y -= 5 / camera.zoom;\n      break;\n    case \"d\":\n      camera.position.x += 5 / camera.zoom;\n      break;\n  }\n};\n\nlet downAt: number;\n\ndocument.onmousedown = (event) => {\n  downAt = Date.now();\n};\n\ndocument.onmouseup = (event) => {\n  const radius = Math.max(20, Math.min(100, (Date.now() - downAt) / 10));\n\n  game.add(\n    new Planet(\n      camera.screenToWorld(new Vector2(event.pageX, event.pageY)),\n      radius,\n      radius * 10000\n    )\n  );\n};\n"]}